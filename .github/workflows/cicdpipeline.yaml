name: Production CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  
jobs:
  # Continuous Integration
  ci:
    runs-on: ubuntu-latest
    outputs:
      # Make build info available to other jobs
      build-version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'  # Automatically cache node_modules
        
    - name: Install dependencies
      run: npm ci  # Like npm install but faster for CI
      
    - name: Run linting
      run: |
        echo "ESLint would run here"
        echo "npm run lint"
        
    - name: Run unit tests
      run: |
        echo "Jest tests would run here"
        echo "npm run test:unit"
        
    - name: Run integration tests
      run: |
        echo "Integration tests would run here"
        echo "npm run test:integration"
        
    - name: Build application
      run: |
        echo "Building application..."
        mkdir -p dist
        echo "Built app $(date)" > dist/app.js
        
    - name: Generate version
      id: version
      run: |
        VERSION="1.0.${{ github.run_number }}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 30

  # Security scanning
  security:
    runs-on: ubuntu-latest
    permissions:
      security-events: write  # For uploading SARIF results
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      run: |
        echo "Security scanning would run here"
        echo "npm audit, Snyk, or similar tools"

  # Deploy to staging
  deploy-staging:
    needs: [ci, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: 
      name: staging
      url: https://staging.example.com
      
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/
        
    - name: Deploy to staging
      run: |
        echo "Deploying version ${{ needs.ci.outputs.build-version }} to staging"
        echo "Contents: $(cat dist/app.js)"

  # Deploy to production (with approval)
  deploy-production:
    needs: [ci, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://example.com
      # Note: You can add required reviewers in repo settings
      
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/
        
    - name: Deploy to production
      run: |
        echo "Deploying version ${{ needs.ci.outputs.build-version }} to production"
        echo "This would be your actual deployment commands"
        
    - name: Notify team
      if: success()
      run: |
        echo "Would send Slack notification here"
        echo "Deployment successful!"
        
    - name: Rollback on failure
      if: failure()
      run: |
        echo "Would rollback deployment here"
        echo "Deployment failed!"